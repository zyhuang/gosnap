#-----------------------------------
# General Defaults
# This configuration file contains 
# the default run-time configuration.
# The user configuration file is read
# prior to reading this file. Only
# keys that have not yet been set are
# read from this file, preserving the
# user configuration values.
#-----------------------------------
#########################
# References
#########################
REF_DIR = /data/local/ref/gotcloud.ref
AS = NCBI37
REF = $(REF_DIR)/human.g1k.v37.fa
DBSNP_VCF =  $(REF_DIR)/dbsnp_135.b37.vcf.gz
HM3_VCF = $(REF_DIR)/hapmap_3.3.b37.sites.vcf.gz
OMNI_VCF = $(REF_DIR)/1000G_omni2.5.b37.sites.PASS.vcf.gz
INDEL_PREFIX = $(REF_DIR)/1kg.pilot_release.merged.indels.sites.hg19 # 1000 Genomes Pilot 1 indel VCF prefix
PE_ANN = $(REF_DIR)/pe.100.01.ann
SE_ANN = $(REF_DIR)/se.100.005.ann
MOSAIK_JMP = $(REF_DIR)/
#

##############
# BINARIES
##############
BIN_DIR = $(GOTCLOUD_ROOT)/bin
SCRIPT_DIR = $(GOTCLOUD_ROOT)/scripts

BASE_PREFIX = 

#-----------------------------------
# Common Defaults
#-----------------------------------
MAKE_OPTS =  # Set additional settings for running the makefile

#-----------------------------------
# Alignment Specific Defaults
#-----------------------------------
FASTQ_PREFIX =

#Set the maper type
MAP_TYPE = BWA

#########################
# Output Directory
#########################
FINAL_BAM_DIR = $(OUT_DIR)/bams

##############
# BINARIES
##############
SAMTOOLS_EXE = $(BIN_DIR)/samtools
BWA_EXE = $(BIN_DIR)/bwa
VERIFY_BAM_ID_EXE = $(BIN_DIR)/verifyBamID
QPLOT_EXE = $(BIN_DIR)/qplot
BAM_EXE = $(BIN_DIR)/bam
MOSAIK_ALIGN_EXE = $(BIN_DIR)/MosaikAligner
MOSAIK_BUILD_EXE = $(BIN_DIR)/MosaikBuild
PREMO_EXE = $(BIN_DIR)/premo

####################
# Alignment Info
####################
SORT_MAX_MEM = 2000000000

########################
# Temporary Directories
########################
TMP_DIR = $(OUT_DIR)/tmp
SAI_TMP = $(TMP_DIR)/bwa.sai.t
ALN_TMP = $(TMP_DIR)/alignment.aln
POL_TMP = $(TMP_DIR)/alignment.pol
MERGE_TMP = $(TMP_DIR)/alignment.pol
DEDUP_TMP = $(TMP_DIR)/alignment.dedup
RECAL_TMP = $(TMP_DIR)/alignment.recal
QC_DIR = $(OUT_DIR)/QCFiles
MKB_TMP = $(TMP_DIR)/mosaikBuild

####################
# BWA Parameters
####################
BWA_THREADS = -t 1
BWA_QUAL = -q 15

########################
# Mosaik Parameters 
########################
MOSAIK_HS = -hs 15
MOSAIK_MHP = -mhp 150
MOSAIK_THREADS = -p 1

########################
# Polish Settings
########################
polish_CMD=$(BAM_EXE) polishBam -f $(REF) --AS $(AS) --UR file:$(REF) --checkSQ -i $(basename $^) -o $(basename $@) -l $(basename $@).log $(BAMUTIL_THINNING)

########################
# Post-Merge Steps
########################
PER_MERGE_STEPS = verifyBamID qplot index recab

merge_EXT = merged.bam
merge_DIR = $(MERGE_TMP)


# To separate dedup & recab into 2 steps, and plot them, use:
#PER_MERGE_STEPS = verifyBamID qplot index recab dedup
#recab_RUN_DEDUP = 
#recab_DEPEND = dedup
#qplot_DEPEND = recab dedup
#qplot_LABELS = recal,dedup

dedup_DEPEND = merge
dedup_REQ_EXES = $(BAM_EXE)
dedup_EXT = dedup.bam
dedup_DIR = $(DEDUP_TMP)
dedup_USER_PARAMS = 
dedup_PARAMS =  --log $(basename $@).metrics
dedup_CMD=$(BAM_EXE) dedup --in $(basename $^) --out $(basename $@) $(dedup_PARAMS) $(dedup_USER_PARAMS) $(BAMUTIL_THINNING)
dedup_RMDEP = 1

recab_DEPEND = merge
recab_REQ_EXES = $(BAM_EXE)
recab_EXT = recal.bam
recab_DIR = $(FINAL_BAM_DIR)
recab_STORE_OQ = --storeQualTag OQ 
recab_PARAMS =  --refFile $(REF) --dbsnp $(DBSNP_VCF) $(recab_STORE_OQ)
recab_USER_PARAMS = 
recab_RUN_DEDUP = dedup $(dedup_PARAMS) $(dedup_USER_PARAMS) --
recab_CMD=$(BAM_EXE) $(recab_RUN_DEDUP)recab --in $(basename $^) --out $(basename $@) $(recab_PARAMS) $(recab_USER_PARAMS) $(BAMUTIL_THINNING)
recab_RMDEP = 1

index_DEPEND = recab
index_REQ_EXES = $(SAMTOOLS_EXE)
index_EXT = $(recab_EXT).bai
index_DIR = $(FINAL_BAM_DIR)
index_CMD = $(SAMTOOLS_EXE) index $(basename $^)

qplot_DEPEND = recab
qplot_REQ_EXES = $(QPLOT_EXE)
qplot_EXT = qplot
qplot_DIR = $(QC_DIR)
qplot_LABELS = recal
qplot_MIN_MAP_QUAL = --minMapQuality 0
qplot_CMD = $(QPLOT_EXE) --reference $(REF) --dbsnp $(DBSNP_VCF) --stats $(basename $@).stats --Rcode $(basename $@).R $(qplot_MIN_MAP_QUAL) --bamlabel $(qplot_LABELS) $(basename $^)

verifyBamID_DEPEND = recab index
verifyBamID_REQ_EXES = $(VERIFY_BAM_ID_EXE)
verifyBamID_EXT = genoCheck
verifyBamID_DIR = $(QC_DIR)
verifyBamID_PARAMS = --verbose --vcf $(HM3_VCF)
verifyBamID_USER_PARAMS = 
verifyBamID_CMD = $(VERIFY_BAM_ID_EXE) --bam $(basename $<) --out $(basename $@) $(verifyBamID_PARAMS) $(verifyBamID_USER_PARAMS)

#-----------------------------------
# Variant Calling Specific Defaults
#-----------------------------------
BAM_PREFIX = 
##################################################################
# GOTCLOUD_ROOT is defined in the script prior to reading any configuration and is
# set to one directory above the umake.pl script.
###############################################################################
## REQUIRED ELEMENTS FOR THE USER TO SET VIA CONF OR PARAMETERS
###############################################################################
#OUT_DIR=
#INPUT_ROOT=
#BAM_INDEX=
CHRS = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 X  # List of chromosomes to call SNPs. For multiple chromosomes, separate by whitespace
###############################################################################
## Optional Settings 
###############################################################################
MAKE_BASE_NAME = umake  # basename of output Makefile $(MAKE_BASE_NAME).<type>.Makefile will be generated
#PED_INDEX = $(INPUT_ROOT)/umake-example.ped    # SAMPLE PED FILE (required only for chrX calling)
#
###############################################################################
## ARGUMENT FOR VCF FILTERING
###############################################################################
# The following set of values are used for applying filters to the VCF.
# To remove a filter, set it to blank or off in your user configuration file

# The following values set the min/max depth filter.
# The minDP filter is calculated using FILTER_MIN_SAMPLE_DP * numSamples or 
# The maxDP filter is calculated using FILTER_MAX_SAMPLE_DP * numSamples or 
FILTER_MAX_SAMPLE_DP = 1000 # Max Depth per Sample
FILTER_MIN_SAMPLE_DP = 1  # Min Depth per Sample

# Filter on the minimum number of samples - based on a fraction of the
# total number of samples.  This will only be used if FILTER_MIN_NS is not set.
FILTER_MIN_NS_FRAC = .50
FILTER_MIN_NS = 


# To remove a filter, set it to blank or "off" in your user configuration file
# The values of these filters must be numbers (or comma/space separated list of numbers
# These rules apply to the following filters:
#   Specifying 1 value in the filter will turn that filter on and use that value.
#   Specifying 2 values in the filter (separated by ',' and/or ' ') turns on the filter.  
#      Use the 1st value if the number of samples is below FILTER_FORMULA_MIN_SAMPLES
#      Use the 2nd value if the number of samples is above FILTER_FORMULA_MAX_SAMPLES
#      If the number of samples is between the MIN & MAX, a logscale is used:
#       (minVal - maxVal) * (log(maxSamples) - log(numSamples)) / (log(maxSamples) - log(minSamples)) + maxVal
FILTER_FORMULA_MIN_SAMPLES = 100
FILTER_FORMULA_MAX_SAMPLES = 1000
FILTER_WIN_INDEL = 5
FILTER_MAX_AOI = 5
FILTER_MAX_ABL = 70, 65
FILTER_MAX_STR = 20, 10
FILTER_MIN_STR = -20, -10
FILTER_MAX_STZ = 5, 10
FILTER_MIN_STZ = -5, -10
FILTER_MIN_FIC = -20, -10
FILTER_MAX_CBR = 20, 10
FILTER_MAX_LQR = 30, 20
FILTER_MIN_QUAL = 5
FILTER_MIN_MQ = 20
FILTER_MAX_MQ0 = 10

FILTER_MAX_MQ30 = 
FILTER_MAX_AOZ = 
FILTER_MAX_IOR = 

FILTER_ADDITIONAL = 

###############################################################################
## ARGUMENT FOR SVM FILTERING
###############################################################################
POS_SAMPLE = 100   # percentage of positive samples used for training
NEG_SAMPLE = 100   # percentage of negative samples used for training
SVM_CUTOFF = 0     # SVM score cutoff for PASS/FAIL
USE_SVMMODEL = FALSE   # Whether to use pre-trained model for SVM filtering
SVMMODEL =         # Pre-trained model file

###############################################################################
## ARGUMENT FOR SAMTOOLS FILTER of reads
###############################################################################
SAMTOOLS_VIEW_FILTER = -q 20 -F 0x0704 # samtools view filter (-q by MQ, -F by flag)
BAM_DEPEND = FALSE # Set to TRUE to make the BAMs dependencies in the Makefile
###############################################################################
## STEPS TO RUN : Set to TRUE to run just certain steps
##   --snpcall, --extract, --beagle, --thunder commands automatically set them
###############################################################################
RUN_INDEX = FALSE        # create BAM index file
RUN_PILEUP = FALSE       # create GLF file from BAM
RUN_GLFMULTIPLES = FALSE # create unfiltered SNP calls
RUN_VCFPILEUP = FALSE    # create PVCF files using vcfPileup and run infoCollector
RUN_FILTER = FALSE       # filter SNPs using vcfCooker
RUN_SVM = FALSE          # filter SNPs using SVM
RUN_SPLIT = FALSE        # split SNPs into chunks for genotype refinement
RUN_BEAGLE = FALSE  # BEAGLE - MUST SET AFTER FINISHING PREVIOUS STEPS
RUN_SUBSET = FALSE  # SUBSET FOR THUNDER - MAY BE SET WITH BEAGLE STEP TOGETHER
RUN_THUNDER = FALSE # THUNDER - MUST SET AFTER FINISHING PREVIOUS STEPS
#
###############################################################################
## OPTIONS FOR GLFEXTRACT (GLFMULTIPLES, VCFPILEUP, FILTER MUST BE TURNED OFF)
###############################################################################
#RUN_EXTRACT = TRUE  # Instead of discovering SNPs, extract genotype likelihood in the site of VCF_EXTRACT
#VCF_EXTRACT = # whole-genome (gzipped and tabixed) .vcf.gz file to extract the site information to genotype (such as 1000 Genomes site list)
#
###############################################################################
## OPTIONS FOR EXOME/TARGETED SEQUENCING : COMMENT OUT IF WHOLE GENOME SEQUENCING
###############################################################################
#WRITE_TARGET_LOCI = TRUE  # FOR TARGETED SEQUENCING ONLY -- Write loci file when performing pileup
#UNIFORM_TARGET_BED = $(INPUT_ROOT)/umake-example.bed # Targeted sequencing : When all individuals has the same target. Otherwise, comment it out
#OFFSET_OFF_TARGET = 50 # Extend target by given # of bases 
#MULTIPLE_TARGET_MAP =  # Target per individual : Each line contains [SM_ID] [TARGET_BED]
#TARGET_DIR = target    # Directory to store target information
#SAMTOOLS_VIEW_TARGET_ONLY = TRUE # When performing samtools view, exclude off-target regions (may make command line too long)

#WGS_SVM = TRUE

###############################################################################
## BINARIES
###############################################################################
SAMTOOLS_FOR_PILEUP = $(BIN_DIR)/samtools-hybrid # for samtools pileup
SAMTOOLS_FOR_OTHERS = $(BIN_DIR)/samtools-hybrid # for samtools view and calmd
GLFMERGE = $(BIN_DIR)/glfMerge # used when multiple BAMs exist per indvidual
GLFMULTIPLES = $(BIN_DIR)/glfMultiples --minMapQuality 0 --minDepth 1 --maxDepth 10000000 --uniformTsTv --smartFilter # glfMultiples and options
GLFEXTRACT = $(BIN_DIR)/glfExtract  # glfExtract for obtaining VCF for known sites
VCFPILEUP = $(BIN_DIR)/vcfPileup    # vcfPileup to generate rich per-site information
INFOCOLLECTOR = $(BIN_DIR)/infoCollector # create filtering statistics
VCFMERGE = perl $(SCRIPT_DIR)/bams2vcfMerge.pl # merge multiple BAMs separated by chunk of genomes
VCFCOOKER = $(BIN_DIR)/vcfCooker  # vcfCooker for filtering
VCFSUMMARY = perl $(SCRIPT_DIR)/vcf-summary # Get summary statistics of discovered site
VCFSPLIT = perl $(SCRIPT_DIR)/vcfSplit.pl # split VCF into overlapping chunks for genotype refinement
VCF_SPLIT_CHROM = perl $(SCRIPT_DIR)/vcfSplitChr.pl
VCFPASTE = perl $(SCRIPT_DIR)/vcfPaste.pl # vcfPaste to generate filtered genotype VCF
BEAGLE = java -Xmx4g -jar $(BIN_DIR)/beagle.20101226.jar seed=993478 gprobs=true niterations=50 lowmem=true
VCF2BEAGLE = perl $(SCRIPT_DIR)/vcf2Beagle.pl --PL # convert VCF (with PL tag) into beagle input
BEAGLE2VCF = perl $(SCRIPT_DIR)/beagle2Vcf.pl # convert beagle output to VCF
SVM_SCRIPT = perl $(SCRIPT_DIR)/run_libsvm.pl
SVMLEARN = $(BIN_DIR)/svm-train
SVMCLASSIFY = $(BIN_DIR)/svm-predict
INVNORM = $(BIN_DIR)/invNorm

THUNDER_STATES = --states 400 --weightedStates 300
THUNDER = $(BIN_DIR)/thunderVCF -r 30 --phase --dosage --compact --inputPhased $(THUNDER_STATES) # MaCH/Thunder genotype refinement step
LIGATEVCF = perl $(SCRIPT_DIR)/ligateVcf.pl # ligate multiple phased VCFs while resolving the phase between VCFs
VCFCAT = perl $(SCRIPT_DIR)/vcfCat.pl
BGZIP = $(BIN_DIR)/bgzip
TABIX = $(BIN_DIR)/tabix
BAMUTIL = $(BIN_DIR)/bam

BAMUTIL_THINNING = --phoneHomeThinning 10

#
#############################################################################
## RELATIVE DIRECTORY UNDER OUT_DIR
#############################################################################
BAM_GLF_DIR = glfs/bams   # BAM level GLF
SM_GLF_DIR = glfs/samples # sample level GLF (after glfMerge if necessary)
VCF_DIR = vcfs            # unfiltered and filtered VCF
PVCF_DIR = pvcfs          # vcfPileup results
SPLIT_DIR = split         # chunks split to multiple overlappingpieces 
BEAGLE_DIR = beagle       # beagle output
THUNDER_DIR = thunder     # MaCH/thunder output
GLF_INDEX = glfIndex.ped  # glfMultiples/glfExtract index file info
#
#############################################################################
## OTHER OPTIONS
#############################################################################
UNIT_CHUNK = 5000000      # Chunk size of SNP calling : 5Mb is default
LD_NSNPS = 10000          # Chunk size of genotype refinement : 10,000 SNPs
LD_OVERLAP = 1000         # Overlapping # of SNPs between chinks : 1,000 SNPs
RUN_INDEX_FORCE = FALSE   # Regenerate BAM index file even if it exists
MERGE_BEFORE_FILTER = FALSE # Merge across the chromosome before filtering
NOBAQ_SUBSTRINGS = SOLID  # Avoid BAQ if the BAM file contains the substring
ASSERT_BAM_EXIST = FALSE  # Check if BAM file exists
#

#############################################################################
## CLUSTER SETTING : CURRENTLY COMPATIBLE WITH MOSIX PLATFORM
#############################################################################
SLEEP_MULT =     
BATCH_TYPE = 
BATCH_OPTS = 
REMOTE_PREFIX =  # REMOTE_PREFIX : Set if cluster node see the directory differently (e.g. /net/mymachine/[original-dir])

